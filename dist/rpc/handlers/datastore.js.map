{"version":3,"sources":["../../../src/rpc/handlers/datastore.js"],"names":["METHOD_WHITELIST","Set","request","proxy","wrapper","datastore","method","params","has","Promise","resolve","reject","Error"],"mappings":";;;;;;AAAA,MAAMA,gBAAgB,GAAG,IAAIC,GAAJ,CAAQ,CAC/B,KAD+B,EAE/B,KAF+B,EAG/B,QAH+B,EAI/B,QAJ+B,EAK/B,SAL+B,CAAR,CAAzB;;AAQe,wBAAgBC,OAAhB,EAAyBC,KAAzB,EAAgCC,OAAhC,EAAyC;AACtD,QAAMC,SAAS,GAAGD,OAAO,CAACC,SAA1B;AACA,QAAM,CACJC,MADI,EAEJ,GAAGC,MAFC,IAGFL,OAAO,CAACK,MAHZ;AAKA,SAAOP,gBAAgB,CAACQ,GAAjB,CAAqBF,MAArB,IACHG,OAAO,CAACC,OAAR,CAAgBL,SAAS,CAACC,MAAD,CAAT,CAAkB,GAAGC,MAArB,CAAhB,CADG,GAEHE,OAAO,CAACE,MAAR,CACA,IAAIC,KAAJ,mCAAqCN,MAArC,0BADA,CAFJ;AAKD","sourcesContent":["const METHOD_WHITELIST = new Set([\n  'add',\n  'cat',\n  'dagPut',\n  'dagGet',\n  'setHost'\n])\n\nexport default async function (request, proxy, wrapper) {\n  const datastore = wrapper.datastore\n  const [\n    method,\n    ...params\n  ] = request.params\n\n  return METHOD_WHITELIST.has(method)\n    ? Promise.resolve(datastore[method](...params))\n    : Promise.reject(\n      new Error(`Given datastore method (${method}) is not whitelisted`)\n    )\n}\n"],"file":"datastore.js"}
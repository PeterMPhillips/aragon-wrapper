{"version":3,"sources":["../../../src/rpc/handlers/get-apps.test.js"],"names":["test","afterEach","always","sinon","restore","t","plan","initialApps","appId","kernelAddress","contractAddress","abi","isForwarder","name","proxyAddress","icons","src","appsMock","BehaviorSubject","identifiersMock","requestStub","params","proxyStub","wrapperStub","apm","getContentPath","content","path","apps","appIdentifiers","result","expectedInitialApps","appAddress","appImplementationAddress","identifier","expectedEndApps","concat","emitIndex","subscribe","value","deepEqual","fail","endApps","next","icon","expectedApps","currentAppAddress","initialApp","address","endApp"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;AAEAA,aAAKC,SAAL,CAAeC,MAAf,CAAsB,MAAM;AAC1BC,iBAAMC,OAAN;AACD,CAFD;;AAIA,kBAAK,uEAAL,EAA8E,MAAOC,CAAP,IAAa;AACzFA,EAAAA,CAAC,CAACC,IAAF,CAAO,CAAP,EADyF,CAGzF;;AACA,QAAMC,WAAW,GAAG,CAAC;AACnBC,IAAAA,KAAK,EAAE,SADY;AAEnBC,IAAAA,aAAa,EAAE,OAFI;AAGnBC,IAAAA,eAAe,EAAE,WAHE;AAInBC,IAAAA,GAAG,EAAE,iBAJc;AAKnBC,IAAAA,WAAW,EAAE,KALM;AAMnBC,IAAAA,IAAI,EAAE,UANa;AAOnBC,IAAAA,YAAY,EAAE,OAPK;AAQnBC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD;AARY,GAAD,CAApB;AAUA,QAAMC,QAAQ,GAAG,IAAIC,qBAAJ,CAAoBX,WAApB,CAAjB;AACA,QAAMY,eAAe,GAAG,cAAG;AACzB,aAAS,iBADgB;AAEzB,aAAS;AAFgB,GAAH,CAAxB;AAKA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,KAAZ;AADU,GAApB;AAGA,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,GAAG,EAAE;AACHC,MAAAA,cAAc,EAAE,CAACC,OAAD,EAAUC,IAAV,mBAA0BA,IAA1B;AADb,KADa;AAIlBC,IAAAA,IAAI,EAAEX,QAJY;AAKlBY,IAAAA,cAAc,EAAEV;AALE,GAApB,CAxByF,CAgCzF;;AACA,QAAMW,MAAM,GAAG,MAAM,sBAAQV,WAAR,EAAqBE,SAArB,EAAgCC,WAAhC,CAArB,CAjCyF,CAmCzF;;AACA,QAAMQ,mBAAmB,GAAG,CAAC;AAC3BC,IAAAA,UAAU,EAAE,OADe;AAE3BxB,IAAAA,KAAK,EAAE,SAFoB;AAG3ByB,IAAAA,wBAAwB,EAAE,WAHC;AAI3BC,IAAAA,UAAU,EAAE,iBAJe;AAK3BtB,IAAAA,WAAW,EAAE,KALc;AAM3BH,IAAAA,aAAa,EAAE,OANY;AAO3BI,IAAAA,IAAI,EAAE,UAPqB;AAQ3BE,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD;AARoB,GAAD,CAA5B;AAUA,QAAMmB,eAAe,GAAG,GAAGC,MAAH,CAAUL,mBAAV,EAA+B;AACrDC,IAAAA,UAAU,EAAE,OADyC;AAErDxB,IAAAA,KAAK,EAAE,WAF8C;AAGrDyB,IAAAA,wBAAwB,EAAE,aAH2B;AAIrDC,IAAAA,UAAU,EAAE,mBAJyC;AAKrDtB,IAAAA,WAAW,EAAE,IALwC;AAMrDH,IAAAA,aAAa,EAAE,OANsC;AAOrDI,IAAAA,IAAI,EAAE,YAP+C;AAQrDE,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD;AAR8C,GAA/B,CAAxB;AAUA,MAAIqB,SAAS,GAAG,CAAhB;AACAP,EAAAA,MAAM,CAACQ,SAAP,CAAiBC,KAAK,IAAI;AACxB,QAAIF,SAAS,KAAK,CAAlB,EAAqB;AACnBhC,MAAAA,CAAC,CAACmC,SAAF,CAAYD,KAAZ,EAAmBR,mBAAnB;AACD,KAFD,MAEO,IAAIM,SAAS,KAAK,CAAlB,EAAqB;AAC1BhC,MAAAA,CAAC,CAACmC,SAAF,CAAYD,KAAZ,EAAmBJ,eAAnB;AACD,KAFM,MAEA;AACL9B,MAAAA,CAAC,CAACoC,IAAF,CAAO,oBAAP;AACD;;AAEDJ,IAAAA,SAAS;AACV,GAVD,EAzDyF,CAqEzF;AACA;;AACA,QAAMK,OAAO,GAAG,GAAGN,MAAH,CAAU7B,WAAV,EAAuB;AACrCC,IAAAA,KAAK,EAAE,WAD8B;AAErCC,IAAAA,aAAa,EAAE,OAFsB;AAGrCC,IAAAA,eAAe,EAAE,aAHoB;AAIrCC,IAAAA,GAAG,EAAE,mBAJgC;AAKrCC,IAAAA,WAAW,EAAE,IALwB;AAMrCC,IAAAA,IAAI,EAAE,YAN+B;AAOrCC,IAAAA,YAAY,EAAE,OAPuB;AAQrCC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD;AAR8B,GAAvB,CAAhB;AAUAC,EAAAA,QAAQ,CAAC0B,IAAT,CAAcD,OAAd;AACD,CAlFD;AAoFA,kBAAK,0EAAL,EAAiF,MAAOrC,CAAP,IAAa;AAC5FA,EAAAA,CAAC,CAACC,IAAF,CAAO,CAAP,EAD4F,CAG5F;;AACA,QAAMC,WAAW,GAAG,CAAC;AACnBC,IAAAA,KAAK,EAAE,SADY;AAEnBC,IAAAA,aAAa,EAAE,OAFI;AAGnBC,IAAAA,eAAe,EAAE,WAHE;AAInBC,IAAAA,GAAG,EAAE,iBAJc;AAKnBC,IAAAA,WAAW,EAAE,KALM;AAMnBC,IAAAA,IAAI,EAAE,UANa;AAOnB+B,IAAAA,IAAI,EAAE,WAPa;AAQnB9B,IAAAA,YAAY,EAAE;AARK,GAAD,CAApB;AAUA,QAAM4B,OAAO,GAAG,GAAGN,MAAH,CAAU7B,WAAV,EAAuB;AACrCC,IAAAA,KAAK,EAAE,WAD8B;AAErCC,IAAAA,aAAa,EAAE,OAFsB;AAGrCC,IAAAA,eAAe,EAAE,aAHoB;AAIrCC,IAAAA,GAAG,EAAE,mBAJgC;AAKrCC,IAAAA,WAAW,EAAE,IALwB;AAMrCC,IAAAA,IAAI,EAAE,YAN+B;AAOrC+B,IAAAA,IAAI,EAAE,WAP+B;AAQrC9B,IAAAA,YAAY,EAAE;AARuB,GAAvB,CAAhB;AAUA,QAAMG,QAAQ,GAAG,cAAGV,WAAH,EAAgBmC,OAAhB,CAAjB;AAEA,QAAMtB,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE;AADU,GAApB;AAGA,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,WAAW,GAAG;AAClBK,IAAAA,IAAI,EAAEX;AADY,GAApB,CA9B4F,CAkC5F;;AACA,QAAMa,MAAM,GAAG,MAAM,sBAAQV,WAAR,EAAqBE,SAArB,EAAgCC,WAAhC,CAArB,CAnC4F,CAoC5F;;AACA,MAAIc,SAAS,GAAG,CAAhB;AACAP,EAAAA,MAAM,CAACQ,SAAP,CAAiBC,KAAK,IAAI;AACxB,QAAIF,SAAS,KAAK,CAAlB,EAAqB;AACnBhC,MAAAA,CAAC,CAACmC,SAAF,CAAYD,KAAZ,EAAmBhC,WAAnB;AACD,KAFD,MAEO,IAAI8B,SAAS,KAAK,CAAlB,EAAqB;AAC1BhC,MAAAA,CAAC,CAACmC,SAAF,CAAYD,KAAZ,EAAmBG,OAAnB;AACD,KAFM,MAEA;AACLrC,MAAAA,CAAC,CAACoC,IAAF,CAAO,oBAAP;AACD;;AAEDJ,IAAAA,SAAS;AACV,GAVD;AAWD,CAjDD;AAmDA,kBAAK,wEAAL,EAA+E,MAAOhC,CAAP,IAAa;AAC1FA,EAAAA,CAAC,CAACC,IAAF,CAAO,CAAP,EAD0F,CAG1F;;AACA,QAAMC,WAAW,GAAG,CAAC;AACnBC,IAAAA,KAAK,EAAE,SADY;AAEnBC,IAAAA,aAAa,EAAE,OAFI;AAGnBC,IAAAA,eAAe,EAAE,WAHE;AAInBC,IAAAA,GAAG,EAAE,iBAJc;AAKnBC,IAAAA,WAAW,EAAE,KALM;AAMnBC,IAAAA,IAAI,EAAE,UANa;AAOnBC,IAAAA,YAAY,EAAE,OAPK;AAQnBC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD;AARY,GAAD,CAApB;AAUA,QAAMC,QAAQ,GAAG,IAAIC,qBAAJ,CAAoBX,WAApB,CAAjB;AACA,QAAMY,eAAe,GAAG,cAAG;AACzB,aAAS,iBADgB;AAEzB,aAAS;AAFgB,GAAH,CAAxB;AAKA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,KAAR;AADU,GAApB;AAGA,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,GAAG,EAAE;AACHC,MAAAA,cAAc,EAAE,CAACC,OAAD,EAAUC,IAAV,mBAA0BA,IAA1B;AADb,KADa;AAIlBC,IAAAA,IAAI,EAAEX,QAJY;AAKlBY,IAAAA,cAAc,EAAEV;AALE,GAApB,CAxB0F,CAgC1F;;AACA,QAAMW,MAAM,GAAG,MAAM,sBAAQV,WAAR,EAAqBE,SAArB,EAAgCC,WAAhC,CAArB,CAjC0F,CAmC1F;;AACA,QAAMsB,YAAY,GAAG,CAAC;AACpBb,IAAAA,UAAU,EAAE,OADQ;AAEpBxB,IAAAA,KAAK,EAAE,SAFa;AAGpByB,IAAAA,wBAAwB,EAAE,WAHN;AAIpBC,IAAAA,UAAU,EAAE,iBAJQ;AAKpBtB,IAAAA,WAAW,EAAE,KALO;AAMpBH,IAAAA,aAAa,EAAE,OANK;AAOpBI,IAAAA,IAAI,EAAE,UAPc;AAQpBE,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD;AARa,GAAD,CAArB;AAUA,MAAIqB,SAAS,GAAG,CAAhB;AACAP,EAAAA,MAAM,CAACQ,SAAP,CAAiBC,KAAK,IAAI;AACxB,QAAIF,SAAS,KAAK,CAAlB,EAAqB;AACnBhC,MAAAA,CAAC,CAACmC,SAAF,CAAYD,KAAZ,EAAmBM,YAAnB;AACD,KAFD,MAEO;AACLxC,MAAAA,CAAC,CAACoC,IAAF,CAAO,oBAAP;AACD;;AAEDJ,IAAAA,SAAS;AACV,GARD,EA/C0F,CAyD1F;AACA;;AACA,QAAMK,OAAO,GAAG,GAAGN,MAAH,CAAU7B,WAAV,EAAuB;AACrCC,IAAAA,KAAK,EAAE,WAD8B;AAErCC,IAAAA,aAAa,EAAE,OAFsB;AAGrCC,IAAAA,eAAe,EAAE,aAHoB;AAIrCC,IAAAA,GAAG,EAAE,mBAJgC;AAKrCC,IAAAA,WAAW,EAAE,IALwB;AAMrCC,IAAAA,IAAI,EAAE,YAN+B;AAOrCC,IAAAA,YAAY,EAAE,OAPuB;AAQrCC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD;AAR8B,GAAvB,CAAhB;AAUAC,EAAAA,QAAQ,CAAC0B,IAAT,CAAcD,OAAd;AACD,CAtED;AAwEA,kBAAK,4EAAL,EAAmF,MAAOrC,CAAP,IAAa;AAC9FA,EAAAA,CAAC,CAACC,IAAF,CAAO,CAAP,EAD8F,CAG9F;;AACA,QAAMwC,iBAAiB,GAAG,OAA1B;AACA,QAAMC,UAAU,GAAG;AACjBvC,IAAAA,KAAK,EAAE,SADU;AAEjBE,IAAAA,eAAe,EAAE,WAFA;AAGjBD,IAAAA,aAAa,EAAE,OAHE;AAIjBE,IAAAA,GAAG,EAAE,iBAJY;AAKjBC,IAAAA,WAAW,EAAE,KALI;AAMjBC,IAAAA,IAAI,EAAE,UANW;AAOjBC,IAAAA,YAAY,EAAEgC,iBAPG;AAQjB/B,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD;AARU,GAAnB;AAUA,QAAMC,QAAQ,GAAG,IAAIC,qBAAJ,CAAoB,CAAC6B,UAAD,CAApB,CAAjB;AACA,QAAM5B,eAAe,GAAG,cAAG;AACzB,aAAS;AADgB,GAAH,CAAxB;AAIA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ;AADU,GAApB;AAGA,QAAMC,SAAS,GAAG;AAChB0B,IAAAA,OAAO,EAAEF;AADO,GAAlB;AAGA,QAAMvB,WAAW,GAAG;AAClBC,IAAAA,GAAG,EAAE;AACHC,MAAAA,cAAc,EAAE,CAACC,OAAD,EAAUC,IAAV,mBAA0BA,IAA1B;AADb,KADa;AAIlBC,IAAAA,IAAI,EAAEX,QAJY;AAKlBY,IAAAA,cAAc,EAAEV;AALE,GAApB,CA1B8F,CAkC9F;;AACA,QAAMW,MAAM,GAAG,MAAM,sBAAQV,WAAR,EAAqBE,SAArB,EAAgCC,WAAhC,CAArB,CAnC8F,CAqC9F;;AACA,MAAIc,SAAS,GAAG,CAAhB;AACAP,EAAAA,MAAM,CAACQ,SAAP,CAAiBC,KAAK,IAAI;AACxB,QAAIF,SAAS,KAAK,CAAlB,EAAqB;AACnBhC,MAAAA,CAAC,CAACmC,SAAF,CAAYD,KAAZ,EAAmB;AACjBP,QAAAA,UAAU,EAAEc,iBADK;AAEjBtC,QAAAA,KAAK,EAAE,SAFU;AAGjByB,QAAAA,wBAAwB,EAAE,WAHT;AAIjBC,QAAAA,UAAU,EAAE,iBAJK;AAKjBtB,QAAAA,WAAW,EAAE,KALI;AAMjBH,QAAAA,aAAa,EAAE,OANE;AAOjBI,QAAAA,IAAI,EAAE,UAPW;AAQjBE,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAAD;AARU,OAAnB;AAUD,KAXD,MAWO,IAAIqB,SAAS,KAAK,CAAlB,EAAqB;AAC1BhC,MAAAA,CAAC,CAACmC,SAAF,CAAYD,KAAZ,EAAmB;AACjBP,QAAAA,UAAU,EAAEc,iBADK;AAEjBtC,QAAAA,KAAK,EAAE,aAFU;AAGjByB,QAAAA,wBAAwB,EAAE,WAHT;AAIjBC,QAAAA,UAAU,EAAE,iBAJK;AAKjBtB,QAAAA,WAAW,EAAE,KALI;AAMjBH,QAAAA,aAAa,EAAE,OANE;AAOjBI,QAAAA,IAAI,EAAE,UAPW;AAQjBE,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAAD;AARU,OAAnB;AAUD,KAXM,MAWA;AACLX,MAAAA,CAAC,CAACoC,IAAF,CAAO,oBAAP;AACD;;AAEDJ,IAAAA,SAAS;AACV,GA5BD,EAvC8F,CAqE9F;AACA;;AACA,QAAMY,MAAM,qBACPF,UADO;AAEVvC,IAAAA,KAAK,EAAE;AAFG,IAAZ;;AAIAS,EAAAA,QAAQ,CAAC0B,IAAT,CAAc,CACZ;AACA;AACEnC,IAAAA,KAAK,EAAE,WADT;AAEEC,IAAAA,aAAa,EAAE,OAFjB;AAGEC,IAAAA,eAAe,EAAE,aAHnB;AAIEC,IAAAA,GAAG,EAAE,mBAJP;AAKEC,IAAAA,WAAW,EAAE,IALf;AAMEC,IAAAA,IAAI,EAAE,YANR;AAOEC,IAAAA,YAAY,EAAE,OAPhB;AAQEC,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD;AART,GAFY,EAYZiC,MAZY,CAAd;AAcD,CAzFD;AA2FA,kBAAK,6EAAL,EAAoF,MAAO5C,CAAP,IAAa;AAC/FA,EAAAA,CAAC,CAACC,IAAF,CAAO,CAAP,EAD+F,CAG/F;;AACA,QAAMwC,iBAAiB,GAAG,OAA1B;AACA,QAAMC,UAAU,GAAG;AACjBvC,IAAAA,KAAK,EAAE,SADU;AAEjBE,IAAAA,eAAe,EAAE,WAFA;AAGjBD,IAAAA,aAAa,EAAE,OAHE;AAIjBE,IAAAA,GAAG,EAAE,iBAJY;AAKjBC,IAAAA,WAAW,EAAE,KALI;AAMjBC,IAAAA,IAAI,EAAE,UANW;AAOjBC,IAAAA,YAAY,EAAEgC,iBAPG;AAQjB/B,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAD;AARU,GAAnB;;AAUA,QAAMiC,MAAM,qBACPF,UADO;AAEVvC,IAAAA,KAAK,EAAE;AAFG,IAAZ;;AAIA,QAAMS,QAAQ,GAAG,IAAIC,qBAAJ,CAAoB,CAAC6B,UAAD,CAApB,CAAjB;AACA,QAAM5B,eAAe,GAAG,cAAG;AACzB,aAAS;AADgB,GAAH,CAAxB;AAIA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,SAAR;AADU,GAApB;AAGA,QAAMC,SAAS,GAAG;AAChB0B,IAAAA,OAAO,EAAEF;AADO,GAAlB;AAGA,QAAMvB,WAAW,GAAG;AAClBC,IAAAA,GAAG,EAAE;AACHC,MAAAA,cAAc,EAAE,CAACC,OAAD,EAAUC,IAAV,mBAA0BA,IAA1B;AADb,KADa;AAIlBC,IAAAA,IAAI,EAAEX,QAJY;AAKlBY,IAAAA,cAAc,EAAEV;AALE,GAApB,CA9B+F,CAsC/F;;AACA,QAAMW,MAAM,GAAG,MAAM,sBAAQV,WAAR,EAAqBE,SAArB,EAAgCC,WAAhC,CAArB,CAvC+F,CAyC/F;;AACA,MAAIc,SAAS,GAAG,CAAhB;AACAP,EAAAA,MAAM,CAACQ,SAAP,CAAiBC,KAAK,IAAI;AACxB,QAAIF,SAAS,KAAK,CAAlB,EAAqB;AACnBhC,MAAAA,CAAC,CAACmC,SAAF,CAAYD,KAAZ,EAAmB;AACjBP,QAAAA,UAAU,EAAEc,iBADK;AAEjBtC,QAAAA,KAAK,EAAE,SAFU;AAGjByB,QAAAA,wBAAwB,EAAE,WAHT;AAIjBC,QAAAA,UAAU,EAAE,iBAJK;AAKjBtB,QAAAA,WAAW,EAAE,KALI;AAMjBH,QAAAA,aAAa,EAAE,OANE;AAOjBI,QAAAA,IAAI,EAAE,UAPW;AAQjBE,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,GAAG,EAAE;AAAP,SAAD;AARU,OAAnB;AAUD,KAXD,MAWO;AACLX,MAAAA,CAAC,CAACoC,IAAF,CAAO,oBAAP;AACD;;AAEDJ,IAAAA,SAAS;AACV,GAjBD,EA3C+F,CA8D/F;AACA;;AACApB,EAAAA,QAAQ,CAAC0B,IAAT,CAAc,CAACM,MAAD,CAAd;AACD,CAjED","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport { of, BehaviorSubject } from 'rxjs'\n\nimport getApps from './get-apps'\n\ntest.afterEach.always(() => {\n  sinon.restore()\n})\n\ntest('should return a subscription for the entire app list if observing all', async (t) => {\n  t.plan(2)\n\n  // arrange\n  const initialApps = [{\n    appId: 'coolApp',\n    kernelAddress: '0x123',\n    contractAddress: '0xcoolApp',\n    abi: 'abi for coolApp',\n    isForwarder: false,\n    name: 'Cool App',\n    proxyAddress: '0x456',\n    icons: [{ src: 'icon_link' }]\n  }]\n  const appsMock = new BehaviorSubject(initialApps)\n  const identifiersMock = of({\n    '0x456': 'cool identifier',\n    '0x789': 'voting identifier'\n  })\n\n  const requestStub = {\n    params: ['observe', 'all']\n  }\n  const proxyStub = {}\n  const wrapperStub = {\n    apm: {\n      getContentPath: (content, path) => `url/${path}`\n    },\n    apps: appsMock,\n    appIdentifiers: identifiersMock\n  }\n\n  // act\n  const result = await getApps(requestStub, proxyStub, wrapperStub)\n\n  // assert\n  const expectedInitialApps = [{\n    appAddress: '0x456',\n    appId: 'coolApp',\n    appImplementationAddress: '0xcoolApp',\n    identifier: 'cool identifier',\n    isForwarder: false,\n    kernelAddress: '0x123',\n    name: 'Cool App',\n    icons: [{ src: 'url/icon_link' }]\n  }]\n  const expectedEndApps = [].concat(expectedInitialApps, {\n    appAddress: '0x789',\n    appId: 'votingApp',\n    appImplementationAddress: '0xvotingApp',\n    identifier: 'voting identifier',\n    isForwarder: true,\n    kernelAddress: '0x123',\n    name: 'Voting App',\n    icons: [{ src: 'url/icon_link' }]\n  })\n  let emitIndex = 0\n  result.subscribe(value => {\n    if (emitIndex === 0) {\n      t.deepEqual(value, expectedInitialApps)\n    } else if (emitIndex === 1) {\n      t.deepEqual(value, expectedEndApps)\n    } else {\n      t.fail('too many emissions')\n    }\n\n    emitIndex++\n  })\n\n  // We need apps' second emission to fire after the identifiers have emitted,\n  // so that the combineLatest doesn't skip the initial value\n  const endApps = [].concat(initialApps, {\n    appId: 'votingApp',\n    kernelAddress: '0x123',\n    contractAddress: '0xvotingApp',\n    abi: 'abi for votingApp',\n    isForwarder: true,\n    name: 'Voting App',\n    proxyAddress: '0x789',\n    icons: [{ src: 'icon_link' }]\n  })\n  appsMock.next(endApps)\n})\n\ntest('should return a subscription for the entire app list via initial RPC API', async (t) => {\n  t.plan(2)\n\n  // arrange\n  const initialApps = [{\n    appId: 'coolApp',\n    kernelAddress: '0x123',\n    contractAddress: '0xcoolApp',\n    abi: 'abi for coolApp',\n    isForwarder: false,\n    name: 'Cool App',\n    icon: 'icon link',\n    proxyAddress: '0x456'\n  }]\n  const endApps = [].concat(initialApps, {\n    appId: 'votingApp',\n    kernelAddress: '0x123',\n    contractAddress: '0xvotingApp',\n    abi: 'abi for votingApp',\n    isForwarder: true,\n    name: 'Voting App',\n    icon: 'icon link',\n    proxyAddress: '0x789'\n  })\n  const appsMock = of(initialApps, endApps)\n\n  const requestStub = {\n    params: []\n  }\n  const proxyStub = {}\n  const wrapperStub = {\n    apps: appsMock\n  }\n\n  // act\n  const result = await getApps(requestStub, proxyStub, wrapperStub)\n  // assert\n  let emitIndex = 0\n  result.subscribe(value => {\n    if (emitIndex === 0) {\n      t.deepEqual(value, initialApps)\n    } else if (emitIndex === 1) {\n      t.deepEqual(value, endApps)\n    } else {\n      t.fail('too many emissions')\n    }\n\n    emitIndex++\n  })\n})\n\ntest('should return the initial value for the entire app list if getting all', async (t) => {\n  t.plan(1)\n\n  // arrange\n  const initialApps = [{\n    appId: 'coolApp',\n    kernelAddress: '0x123',\n    contractAddress: '0xcoolApp',\n    abi: 'abi for coolApp',\n    isForwarder: false,\n    name: 'Cool App',\n    proxyAddress: '0x456',\n    icons: [{ src: 'icon_link' }]\n  }]\n  const appsMock = new BehaviorSubject(initialApps)\n  const identifiersMock = of({\n    '0x456': 'cool identifier',\n    '0x789': 'voting identifier'\n  })\n\n  const requestStub = {\n    params: ['get', 'all']\n  }\n  const proxyStub = {}\n  const wrapperStub = {\n    apm: {\n      getContentPath: (content, path) => `url/${path}`\n    },\n    apps: appsMock,\n    appIdentifiers: identifiersMock\n  }\n\n  // act\n  const result = await getApps(requestStub, proxyStub, wrapperStub)\n\n  // assert\n  const expectedApps = [{\n    appAddress: '0x456',\n    appId: 'coolApp',\n    appImplementationAddress: '0xcoolApp',\n    identifier: 'cool identifier',\n    isForwarder: false,\n    kernelAddress: '0x123',\n    name: 'Cool App',\n    icons: [{ src: 'url/icon_link' }]\n  }]\n  let emitIndex = 0\n  result.subscribe(value => {\n    if (emitIndex === 0) {\n      t.deepEqual(value, expectedApps)\n    } else {\n      t.fail('too many emissions')\n    }\n\n    emitIndex++\n  })\n\n  // Even though this is filtered out, we need apps' second emission to fire after the identifiers\n  // have emitted, so that the combineLatest doesn't skip the initial value\n  const endApps = [].concat(initialApps, {\n    appId: 'votingApp',\n    kernelAddress: '0x123',\n    contractAddress: '0xvotingApp',\n    abi: 'abi for votingApp',\n    isForwarder: true,\n    name: 'Voting App',\n    proxyAddress: '0x789',\n    icons: [{ src: 'icon_link' }]\n  })\n  appsMock.next(endApps)\n})\n\ntest('should return a subscription for just the current app if observing current', async (t) => {\n  t.plan(2)\n\n  // arrange\n  const currentAppAddress = '0x456'\n  const initialApp = {\n    appId: 'coolApp',\n    contractAddress: '0xcoolApp',\n    kernelAddress: '0x123',\n    abi: 'abi for coolApp',\n    isForwarder: false,\n    name: 'Cool App',\n    proxyAddress: currentAppAddress,\n    icons: [{ src: 'icon_link' }]\n  }\n  const appsMock = new BehaviorSubject([initialApp])\n  const identifiersMock = of({\n    '0x456': 'cool identifier'\n  })\n\n  const requestStub = {\n    params: ['observe', 'current']\n  }\n  const proxyStub = {\n    address: currentAppAddress\n  }\n  const wrapperStub = {\n    apm: {\n      getContentPath: (content, path) => `url/${path}`\n    },\n    apps: appsMock,\n    appIdentifiers: identifiersMock\n  }\n\n  // act\n  const result = await getApps(requestStub, proxyStub, wrapperStub)\n\n  // assert\n  let emitIndex = 0\n  result.subscribe(value => {\n    if (emitIndex === 0) {\n      t.deepEqual(value, {\n        appAddress: currentAppAddress,\n        appId: 'coolApp',\n        appImplementationAddress: '0xcoolApp',\n        identifier: 'cool identifier',\n        isForwarder: false,\n        kernelAddress: '0x123',\n        name: 'Cool App',\n        icons: [{ src: 'url/icon_link' }]\n      })\n    } else if (emitIndex === 1) {\n      t.deepEqual(value, {\n        appAddress: currentAppAddress,\n        appId: 'new coolApp',\n        appImplementationAddress: '0xcoolApp',\n        identifier: 'cool identifier',\n        isForwarder: false,\n        kernelAddress: '0x123',\n        name: 'Cool App',\n        icons: [{ src: 'url/icon_link' }]\n      })\n    } else {\n      t.fail('too many emissions')\n    }\n\n    emitIndex++\n  })\n\n  // We need apps' second emission to fire after the identifiers have emitted,\n  // so that the combineLatest doesn't skip the initial value\n  const endApp = {\n    ...initialApp,\n    appId: 'new coolApp'\n  }\n  appsMock.next([\n    // This extra app should be filtered out\n    {\n      appId: 'votingApp',\n      kernelAddress: '0x123',\n      contractAddress: '0xvotingApp',\n      abi: 'abi for votingApp',\n      isForwarder: true,\n      name: 'Voting App',\n      proxyAddress: '0x789',\n      icons: [{ src: 'icon_link' }]\n    },\n    endApp\n  ])\n})\n\ntest('should return the initial value for just the current app if getting current', async (t) => {\n  t.plan(1)\n\n  // arrange\n  const currentAppAddress = '0x456'\n  const initialApp = {\n    appId: 'coolApp',\n    contractAddress: '0xcoolApp',\n    kernelAddress: '0x123',\n    abi: 'abi for coolApp',\n    isForwarder: false,\n    name: 'Cool App',\n    proxyAddress: currentAppAddress,\n    icons: [{ src: 'icon_link' }]\n  }\n  const endApp = {\n    ...initialApp,\n    appId: 'new coolApp'\n  }\n  const appsMock = new BehaviorSubject([initialApp])\n  const identifiersMock = of({\n    '0x456': 'cool identifier'\n  })\n\n  const requestStub = {\n    params: ['get', 'current']\n  }\n  const proxyStub = {\n    address: currentAppAddress\n  }\n  const wrapperStub = {\n    apm: {\n      getContentPath: (content, path) => `url/${path}`\n    },\n    apps: appsMock,\n    appIdentifiers: identifiersMock\n  }\n\n  // act\n  const result = await getApps(requestStub, proxyStub, wrapperStub)\n\n  // assert\n  let emitIndex = 0\n  result.subscribe(value => {\n    if (emitIndex === 0) {\n      t.deepEqual(value, {\n        appAddress: currentAppAddress,\n        appId: 'coolApp',\n        appImplementationAddress: '0xcoolApp',\n        identifier: 'cool identifier',\n        isForwarder: false,\n        kernelAddress: '0x123',\n        name: 'Cool App',\n        icons: [{ src: 'url/icon_link' }]\n      })\n    } else {\n      t.fail('too many emissions')\n    }\n\n    emitIndex++\n  })\n\n  // Even though this is filtered out, we need apps' second emission to fire after the identifiers\n  // have emitted, so that the combineLatest doesn't skip the initial value\n  appsMock.next([endApp])\n})\n"],"file":"get-apps.test.js"}
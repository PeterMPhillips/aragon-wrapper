{"version":3,"sources":["../../src/datastore/index.js"],"names":["Datastore","constructor","options","appInfo","storage","host","setHost","listenToStorageApp","address","response","axios","post","JSON","stringify","contractAddress","headers","status","console","error","err","add","val","formData","FormData","append","result","data","cat","hash","get","body","dagPut","dag","dagGet"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;;;;;;AASgB,MAAMA,SAAN,CAAgB;AAC9BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA,wDA8BLC,OAAD,IAAaA,OAAO,CAACC,OA9Bf;AACnB,SAAKC,IAAL,GAAaH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6B,8BAAzC;AACD;;AAEDC,EAAAA,OAAO,CAACD,IAAD,EAAO;AACZ,SAAKA,IAAL,GAAYA,IAAZ;AACD,GAP6B,CAS9B;;;AACA,QAAME,kBAAN,CAAyBC,OAAzB,EAAkC;AAChC,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,eAAMC,IAAN,WAClB,KAAKN,IADa,wBAErBO,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,eAAe,EAAEN;AAAnB,OAAf,CAFqB,EAGrB;AACEO,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADX,OAHqB,CAAvB;;AAQA,UAAI,EAAEN,QAAQ,CAACO,MAAT,KAAoB,GAApB,IACDP,QAAQ,CAACO,MAAT,KAAoB,GADnB,IAEDP,QAAQ,CAACO,MAAT,KAAoB,GAFrB,CAAJ,EAGE;AACAC,QAAAA,OAAO,CAACC,KAAR,yDAA+DV,OAA/D;AACD;AACF,KAfD,CAeE,OAAOW,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,KAAR,yDAA+DV,OAA/D,2BAAuFW,GAAvF;AACD;AACF;;AAID;;;;;;;;;;;;;;AAiBA,QAAMC,GAAN,CAAUC,GAAV,EAAe;AACb,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,GAAzB;;AAEA,QAAI;AACF,YAAMI,MAAM,GAAG,MAAMf,eAAMC,IAAN,WAAc,KAAKN,IAAnB,WAA+BiB,QAA/B,CAArB;AAEA,aAAOG,MAAM,CAACC,IAAd;AACD,KAJD,CAIE,OAAOP,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,KAAR,CAAc,4BAAd,EAA4CC,GAA5C;AACD;AACF;AAED;;;;;;;;AAMA,QAAMQ,GAAN,CAAUC,IAAV,EAAgB;AACd,QAAI;AACF,YAAMH,MAAM,GAAG,MAAMf,eAAMmB,GAAN,WAAa,KAAKxB,IAAlB,sBAAkCuB,IAAlC,EAArB;AACA,aAAO;AAAEF,QAAAA,IAAI,EAAED,MAAM,CAACC,IAAf;AAAqBI,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAAlC,OAAP;AACD,KAHD,CAGE,OAAOX,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8CC,GAA9C;AACD;AACF,GA5E6B,CA8E9B;;;AACA,QAAMY,MAAN,CAAaC,GAAb,EAAkB;AAChB,QAAI;AACF,YAAMP,MAAM,GAAG,MAAMf,eAAMC,IAAN,WAAc,KAAKN,IAAnB,eAAmC2B,GAAnC,CAArB;AACA,aAAOP,MAAM,CAACC,IAAd;AACD,KAHD,CAGE,OAAOP,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,KAAR,CAAc,2BAAd,EAA2CC,GAA3C;AACD;AACF,GAtF6B,CAwF9B;;;AACA,QAAMc,MAAN,CAAaL,IAAb,EAAmB;AACjB,QAAI;AACF,YAAMH,MAAM,GAAG,MAAMf,eAAMmB,GAAN,WAAa,KAAKxB,IAAlB,0BAAsCuB,IAAtC,EAArB;AACA,aAAOH,MAAM,CAACC,IAAd;AACD,KAHD,CAGE,OAAOP,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,KAAR,CAAc,6BAAd,EAA6CC,GAA7C;AACD;AACF;;AAhG6B","sourcesContent":["import axios from 'axios';\n\n/**\n * The Datastore connects to Quasar to save and retreive data from IPFS.\n * See the Quasar source here: https://github.com/openworklabs/quasar.\n *\n * @param {Object} [options]\n *        Options\n * @param {string} [options.host]\n *        Your Quasar endpoint.\n */\n export default class Datastore {\n  constructor(options) {\n    this.host = (options && options.host) || 'http://localhost:3003/api/v0';\n  }\n\n  setHost(host) {\n    this.host = host;\n  }\n\n  // ensures that PinHash events fired at this contract address are picked up by Quasar\n  async listenToStorageApp(address) {\n    try {\n      const response = await axios.post(\n        `${this.host}/storageContracts`,\n        JSON.stringify({ contractAddress: address }),\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n      if (!(response.status === 200\n        || response.status === 201\n        || response.status === 204)\n      ) {\n        console.error(`Error registering contract with proxyAddress: ${address} with Quasar`)\n      }\n    } catch (err) {\n      console.error(`Error registering contract with proxyAddress: ${address} with Quasar: ${err}`)\n    }\n  }\n\n  isStorageApp = (appInfo) => appInfo.storage\n\n  /*\n    The `add` function accepts blobs or file objects. I.e.:\n\n    const val = new Blob([Buffer.from(JSON.stringify(json))])\n    const hash = await api.datastore('add', val).toPromise()\n\n    OR\n\n    const reader = new FileReader()\n    reader.onload = async () => {\n      const arrayBuffer = reader.result\n      const file = new File([arrayBuffer], `photo.jpg`, {\n        type: 'text/json;charset=utf-8',\n      })\n      const hash = await add(file)\n    }\n  */\n  async add(val) {\n    const formData = new FormData();\n    formData.append('entry', val);\n\n    try {\n      const result = await axios.post(`${this.host}/add`, formData);\n\n      return result.data;\n    } catch (err) {\n      console.error('Error pinning file to IPFS', err);\n    }\n  }\n\n  /*\n    We add files in a couple different waysâ€”JSON blobs and file objects.\n    JSON blobs are returned in the data fields.\n    Files objects are returned as a readable stream in the body field.\n    You can find us using both of these in the open-enterprise repo.\n  */\n  async cat(hash) {\n    try {\n      const result = await axios.get(`${this.host}/cat?arg=${hash}`);\n      return { data: result.data, body: result.body };\n    } catch (err) {\n      console.error('Error catting file from IPFS', err);\n    }\n  }\n\n  // a dag is any javascript object\n  async dagPut(dag) {\n    try {\n      const result = await axios.post(`${this.host}/dag/put`, dag);\n      return result.data;\n    } catch (err) {\n      console.error('Error putting dag to IPFS', err);\n    }\n  }\n\n  // returns the dag that was passed to dagPut\n  async dagGet(hash) {\n    try {\n      const result = await axios.get(`${this.host}/dag/get?arg=${hash}`);\n      return result.data;\n    } catch (err) {\n      console.error('Error getting dag from IPFS', err);\n    }\n  }\n}\n"],"file":"index.js"}
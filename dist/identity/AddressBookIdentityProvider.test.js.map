{"version":3,"sources":["../../src/identity/AddressBookIdentityProvider.test.js"],"names":["apps","cache","test","before","t","appId","proxyAddress","Cache","init","set","entries","addr","data","name","beforeEach","context","addressBookIdentityProvider","AddressBookIdentityProvider","provider","identityMetadata","resolve","is","throwsAsync","modify","allIdentities","getAll","deepEqual","result","search","address"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport Cache from '../cache'\nimport { of } from 'rxjs'\n\nimport { AddressBookIdentityProvider } from './index'\nlet apps, cache\ntest.before(async t => {\n  apps = of([\n    {\n      appId: '0x32ec8cc9f3136797e0ae30e7bf3740905b0417b81ff6d4a74f6100f9037425de',\n      proxyAddress: '0x0'\n    },\n    {\n      appId: '0x123',\n      proxyAddress: '0x1'\n    },\n    {\n      appId: '0x32ec8cc9f3136797e0ae30e7bf3740905b0417b81ff6d4a74f6100f9037425de',\n      proxyAddress: '0x11'\n    }\n  ])\n\n  cache = new Cache('stubbedAddressBook')\n  await cache.init()\n  cache.set('0x0.state', { entries: [{ addr: '0x3a', data: { name: 'testEntity' } }, { addr: '0x33', data: { name: 'testDude' } }] })\n  cache.set('0x11.state', { entries: [{ addr: '0x3a', data: { name: 'testEntity2' } }] })\n})\n\ntest.beforeEach(async t => {\n  t.context.addressBookIdentityProvider = new AddressBookIdentityProvider(apps, cache)\n  await t.context.addressBookIdentityProvider.init()\n})\n\ntest('should resolve identity from first address book in app array', async t => {\n  const provider = t.context.addressBookIdentityProvider\n  const identityMetadata = await provider.resolve('0x3a')\n  t.is(identityMetadata.name, 'testEntity')\n})\n\ntest('should resolve to null for non-existent identity', async t => {\n  const provider = t.context.addressBookIdentityProvider\n  const identityMetadata = await provider.resolve('0x9')\n  t.is(identityMetadata, null)\n})\n\ntest('should throw error on any modify attempt', async t => {\n  const provider = t.context.addressBookIdentityProvider\n  await t.throwsAsync(() => provider.modify('0x9', { name: 'newEntity' }))\n})\n\ntest('getAll should return a combined Object containing all entries', async t => {\n  const provider = t.context.addressBookIdentityProvider\n  const allIdentities = await provider.getAll()\n  t.deepEqual(allIdentities, {\n    '0x3a': { name: 'testEntity' },\n    '0x33': { name: 'testDude' }\n  })\n})\n\ntest('search should return an array of results of freely matching identities', async t => {\n  const provider = t.context.addressBookIdentityProvider\n  let result = await provider.search('0x3a')\n  t.deepEqual(result, [ { name: 'testEntity', address: '0x3a' } ])\n\n  result = await provider.search('test')\n  t.deepEqual(result, [\n    { name: 'testEntity', address: '0x3a' },\n    { name: 'testDude', address: '0x33' }\n  ])\n\n  result = await provider.search('testd')\n  t.deepEqual(result, [{ name: 'testDude', address: '0x33' }])\n})\n"],"file":"AddressBookIdentityProvider.test.js"}
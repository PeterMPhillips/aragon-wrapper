{"version":3,"sources":["../../src/identity/ThreeBoxProvider.test.js"],"names":["sleep","ms","Promise","resolve","setTimeout","hardcodedImageCid","completedBoxValues","name","image","contentUrl","boxWithNoImage","boxWithNoName","test","before","t","boxBot","ThreeBoxBot","completedBoxEthAddress","createProfile","boxWithNoImageEthAddress","boxWithNoNameEthAddress","noBoxEthAddress","returnAddressWithNoProfile","context","beforeEach","threeBoxIdentityProvider","ThreeBoxIdentityProvider","plan","provider","error","throwsAsync","instanceOf","Error","message","is","serial","createdAt","imageCid","box"],"mappings":"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","sourcesContent":["import test from 'ava';\nimport ThreeBoxBot from '@openworklabs/three-box-bot';\n\nimport { ThreeBoxIdentityProvider } from './index';\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst hardcodedImageCid = 'QmXBDtwGr6EJ9PyX7LnTz2ohCp8qUTNZn1TkWQ1vjenqD2';\nconst completedBoxValues = {\n  name: 'jon',\n  image: [\n    {\n      contentUrl: {\n        '/': hardcodedImageCid,\n      },\n    },\n  ],\n};\n\nconst boxWithNoImage = { name: 'schwartz' };\nconst boxWithNoName = {\n  image: [\n    {\n      contentUrl: {\n        '/': hardcodedImageCid,\n      },\n    },\n  ],\n};\n\ntest.before(async t => {\n  const boxBot = new ThreeBoxBot(\n    'https://rinkeby.infura.io/v3/87f3c8e1836c442d87583ee9a4f3053a'\n  );\n\n  const [completedBoxEthAddress] = await boxBot.createProfile(\n    completedBoxValues\n  );\n  const [boxWithNoImageEthAddress] = await boxBot.createProfile(boxWithNoImage);\n  const [boxWithNoNameEthAddress] = await boxBot.createProfile(boxWithNoName);\n  const noBoxEthAddress = await boxBot.returnAddressWithNoProfile();\n\n  t.context.completedBoxEthAddress = completedBoxEthAddress;\n  t.context.boxWithNoImageEthAddress = boxWithNoImageEthAddress;\n  t.context.boxWithNoNameEthAddress = boxWithNoNameEthAddress;\n  t.context.noBoxEthAddress = noBoxEthAddress;\n\n  // give 3box some time to set the profile properly\n  await sleep(10000);\n});\n\ntest.beforeEach(async t => {\n  t.context.threeBoxIdentityProvider = new ThreeBoxIdentityProvider();\n});\n\ntest('should throw an error when no address is passed', async t => {\n  t.plan(2);\n  const provider = t.context.threeBoxIdentityProvider;\n\n  const error = await t.throwsAsync(\n    async () => {\n      await provider.resolve();\n    },\n    {\n      instanceOf: Error,\n      message: 'address is required when resolving a 3box identity',\n    }\n  );\n\n  t.is(error.message, 'address is required when resolving a 3box identity');\n});\n\ntest.serial(\n  'resolving through completed 3box should return correct identity metadata',\n  async t => {\n    t.plan(3);\n    const completedBoxEthAddress = t.context.completedBoxEthAddress;\n    const {\n      createdAt,\n      imageCid,\n      name,\n    } = await t.context.threeBoxIdentityProvider.resolve(\n      completedBoxEthAddress\n    );\n    t.is(name, completedBoxValues.name);\n    t.is(imageCid, hardcodedImageCid);\n    t.is(createdAt, null);\n  }\n);\n\ntest.serial(\n  'resolving through 3box without a \"name\" field should return eth address instead',\n  async t => {\n    t.plan(1);\n    const boxWithNoNameEthAddress = t.context.boxWithNoNameEthAddress;\n    const { name } = await t.context.threeBoxIdentityProvider.resolve(\n      boxWithNoNameEthAddress\n    );\n    t.is(name, boxWithNoNameEthAddress);\n  }\n);\n\ntest.serial(\n  'resolving through 3box without an \"image\" field should return null for imageCid',\n  async t => {\n    t.plan(1);\n    const boxWithNoImageEthAddress = t.context.boxWithNoImageEthAddress;\n    const { imageCid } = await t.context.threeBoxIdentityProvider.resolve(\n      boxWithNoImageEthAddress\n    );\n    t.is(imageCid, null);\n  }\n);\n\ntest.serial(\n  'should return null when resolving non existent 3box identity',\n  async t => {\n    t.plan(1);\n    const noBoxEthAddress = t.context.noBoxEthAddress;\n    const box = await t.context.threeBoxIdentityProvider.resolve(\n      noBoxEthAddress\n    );\n    t.is(box, null);\n  }\n);\n"],"file":"ThreeBoxProvider.test.js"}
{"version":3,"sources":["../../src/identity/ThreeBoxIdentityProvider.js"],"names":["BOX_SERVER_URL","extractImgHash","image","hash","contentUrl","noop","ThreeBoxIdentityProvider","AddressIdentityProvider","resolve","address","Error","data","axios","get","toLowerCase","createdAt","name","imageCid","err"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA,MAAMA,cAAc,GAAG,sBAAvB;;AAEA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAMC,IAAI,GACRD,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAd,IAAqBA,KAAK,CAAC,CAAD,CAAL,CAASE,UAA9B,IAA4CF,KAAK,CAAC,CAAD,CAAL,CAASE,UAAT,CAAoB,GAApB,CAD9C;AAEA,SAAOD,IAAI,IAAI,IAAf;AACD,CAJD;;AAMA,MAAME,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEe,MAAMC,wBAAN,SAAuCC,gCAAvC,CAA+D;AAAA;AAAA;AAAA,gDACrEF,IADqE;AAAA;;AAE5E;;;;;;;AAOA,QAAMG,OAAN,CAAcC,OAAd,EAAuB;AACrB,QAAI,CAACA,OAAL,EAAc;AACZ,YAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,QAAI,CAAC,0BAAUD,OAAV,CAAL,EAAyB;AACvB,YAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAED,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMC,eAAMC,GAAN,WAClBb,cADkB,8BACgBS,OAAO,CAACK,WAAR,EADhB,EAAvB;AAIA,aAAO;AACLC,QAAAA,SAAS,EAAE,IADN;AAELC,QAAAA,IAAI,EAAEL,IAAI,CAACK,IAAL,IAAaP,OAFd;AAGLQ,QAAAA,QAAQ,EAAEhB,cAAc,CAACU,IAAI,CAACT,KAAN;AAHnB,OAAP;AAKD,KAVD,CAUE,OAAOgB,GAAP,EAAY;AACZ;AACA,aAAO,IAAP;AACD;AACF;;AAhC2E","sourcesContent":["import axios from 'axios';\nimport { isAddress } from 'web3-utils';\n\nimport AddressIdentityProvider from './AddressIdentityProvider';\n\nconst BOX_SERVER_URL = 'https://ipfs.3box.io';\n\nconst extractImgHash = image => {\n  const hash =\n    image && image[0] && image[0].contentUrl && image[0].contentUrl['/'];\n  return hash || null;\n};\n\nconst noop = () => {}\n\nexport default class ThreeBoxIdentityProvider extends AddressIdentityProvider {\n  init = noop\n  /**\n   * Resolve the identity metadata for an address\n   * Should resolve to null if an identity could not be found\n   *\n   * @param  {string} address Address to resolve\n   * @return {Promise} Resolved metadata or rejected error\n   */\n  async resolve(address) {\n    if (!address) {\n      throw new Error('address is required when resolving a 3box identity');\n    }\n\n    if (!isAddress(address)) {\n      throw new Error('invalid address passed to 3box identity resolver')\n    }\n\n    try {\n      const { data } = await axios.get(\n        `${BOX_SERVER_URL}/profile?address=${address.toLowerCase()}`\n      );\n\n      return {\n        createdAt: null,\n        name: data.name || address,\n        imageCid: extractImgHash(data.image),\n      };\n    } catch (err) {\n      // assume errors from 3box means the identity does not exist so we dont slow down any apps\n      return null;\n    }\n  }\n}\n"],"file":"ThreeBoxIdentityProvider.js"}
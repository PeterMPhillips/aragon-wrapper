{"version":3,"sources":["../../src/utils/apps.js"],"names":["apmAppId","appName","findAppMethodFromData","app","data","functions","methodId","substring","find","method","sig","knownAppIds"],"mappings":";;;;;;;;AAAA;;AACA;;AAEO,MAAMA,QAAQ,GAAGC,OAAO,IAAI,oCAAYA,OAAZ,mBAA5B;AAEP;;;;;;;;;;;;AAQO,SAASC,qBAAT,CAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AAChD,MAAID,GAAG,IAAIA,GAAG,CAACE,SAAf,EAA0B;AACxB;AACA,UAAMC,QAAQ,GAAGF,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkB,EAAlB,CAAjB;AACA,WAAOJ,GAAG,CAACE,SAAJ,CAAcG,IAAd,CACJC,MAAD,IAAY,sBAAUA,MAAM,CAACC,GAAjB,EAAsBH,SAAtB,CAAgC,CAAhC,EAAmC,CAAnC,MAA0CD,QADjD,CAAP;AAGD;AACF;;AAEM,MAAMK,WAAW,GAAG,CACzBX,QAAQ,CAAC,SAAD,CADiB,EAEzBA,QAAQ,CAAC,eAAD,CAFiB,EAGzBA,QAAQ,CAAC,OAAD,CAHiB,EAIzBA,QAAQ,CAAC,QAAD,CAJiB,CAApB","sourcesContent":["import { hash as namehash } from 'eth-ens-namehash'\nimport { keccak256 } from 'js-sha3'\n\nexport const apmAppId = appName => namehash(`${appName}.aragonpm.eth`)\n\n/**\n * Find the method descriptor corresponding to the data component of a\n * transaction sent to `app`.\n *\n * @param  {Object} app App artifact\n * @param  {Object} data Data component of a transaction to app\n * @return {Object} Method with radspec notice and function signature\n */\nexport function findAppMethodFromData (app, data) {\n  if (app && app.functions) {\n    // Find the method\n    const methodId = data.substring(2, 10)\n    return app.functions.find(\n      (method) => keccak256(method.sig).substring(0, 8) === methodId\n    )\n  }\n}\n\nexport const knownAppIds = [\n  apmAppId('finance'),\n  apmAppId('token-manager'),\n  apmAppId('vault'),\n  apmAppId('voting')\n]\n"],"file":"apps.js"}